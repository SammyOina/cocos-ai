// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	manager "github.com/ultravioletrs/cocos/pkg/manager"
)

// StateMachine is an autogenerated mock type for the StateMachine type
type StateMachine struct {
	mock.Mock
}

// State provides a mock function with given fields:
func (_m *StateMachine) State() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Transition provides a mock function with given fields: newState
func (_m *StateMachine) Transition(newState manager.ManagerState) error {
	ret := _m.Called(newState)

	if len(ret) == 0 {
		panic("no return value specified for Transition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(manager.ManagerState) error); ok {
		r0 = rf(newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStateMachine creates a new instance of StateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateMachine {
	mock := &StateMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
