// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	manager "github.com/ultravioletrs/cocos/pkg/manager"

	qemu "github.com/ultravioletrs/cocos/manager/qemu"

	vm "github.com/ultravioletrs/cocos/manager/vm"
)

// VMFactory is an autogenerated mock type for the VMFactory type
type VMFactory struct {
	mock.Mock
}

// Execute provides a mock function with given fields: config, logsChan, computationId
func (_m *VMFactory) Execute(config qemu.Config, logsChan chan *manager.ClientStreamMessage, computationId string) vm.VM {
	ret := _m.Called(config, logsChan, computationId)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 vm.VM
	if rf, ok := ret.Get(0).(func(qemu.Config, chan *manager.ClientStreamMessage, string) vm.VM); ok {
		r0 = rf(config, logsChan, computationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vm.VM)
		}
	}

	return r0
}

// NewVMFactory creates a new instance of VMFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVMFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *VMFactory {
	mock := &VMFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
