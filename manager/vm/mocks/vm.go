// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	agent "github.com/ultravioletrs/cocos/agent"
)

// VM is an autogenerated mock type for the VM type
type VM struct {
	mock.Mock
}

// GetProcess provides a mock function with given fields:
func (_m *VM) GetProcess() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProcess")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SendAgentConfig provides a mock function with given fields: ac
func (_m *VM) SendAgentConfig(ac agent.Computation) error {
	ret := _m.Called(ac)

	if len(ret) == 0 {
		panic("no return value specified for SendAgentConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(agent.Computation) error); ok {
		r0 = rf(ac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProcess provides a mock function with given fields: pid
func (_m *VM) SetProcess(pid int) error {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for SetProcess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *VM) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *VM) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVM creates a new instance of VM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVM(t interface {
	mock.TestingT
	Cleanup(func())
}) *VM {
	mock := &VM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
