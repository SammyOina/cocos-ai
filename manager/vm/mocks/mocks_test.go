// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/ultravioletrs/cocos/pkg/manager"
)

// NewStateMachine creates a new instance of StateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateMachine {
	mock := &StateMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StateMachine is an autogenerated mock type for the StateMachine type
type StateMachine struct {
	mock.Mock
}

type StateMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *StateMachine) EXPECT() *StateMachine_Expecter {
	return &StateMachine_Expecter{mock: &_m.Mock}
}

// State provides a mock function for the type StateMachine
func (_mock *StateMachine) State() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// StateMachine_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type StateMachine_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *StateMachine_Expecter) State() *StateMachine_State_Call {
	return &StateMachine_State_Call{Call: _e.mock.On("State")}
}

func (_c *StateMachine_State_Call) Run(run func()) *StateMachine_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateMachine_State_Call) Return(s string) *StateMachine_State_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *StateMachine_State_Call) RunAndReturn(run func() string) *StateMachine_State_Call {
	_c.Call.Return(run)
	return _c
}

// Transition provides a mock function for the type StateMachine
func (_mock *StateMachine) Transition(newState manager.ManagerState) error {
	ret := _mock.Called(newState)

	if len(ret) == 0 {
		panic("no return value specified for Transition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(manager.ManagerState) error); ok {
		r0 = returnFunc(newState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StateMachine_Transition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transition'
type StateMachine_Transition_Call struct {
	*mock.Call
}

// Transition is a helper method to define mock.On call
//   - newState manager.ManagerState
func (_e *StateMachine_Expecter) Transition(newState interface{}) *StateMachine_Transition_Call {
	return &StateMachine_Transition_Call{Call: _e.mock.On("Transition", newState)}
}

func (_c *StateMachine_Transition_Call) Run(run func(newState manager.ManagerState)) *StateMachine_Transition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 manager.ManagerState
		if args[0] != nil {
			arg0 = args[0].(manager.ManagerState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StateMachine_Transition_Call) Return(err error) *StateMachine_Transition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StateMachine_Transition_Call) RunAndReturn(run func(newState manager.ManagerState) error) *StateMachine_Transition_Call {
	_c.Call.Return(run)
	return _c
}

// NewVM creates a new instance of VM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVM(t interface {
	mock.TestingT
	Cleanup(func())
}) *VM {
	mock := &VM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VM is an autogenerated mock type for the VM type
type VM struct {
	mock.Mock
}

type VM_Expecter struct {
	mock *mock.Mock
}

func (_m *VM) EXPECT() *VM_Expecter {
	return &VM_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function for the type VM
func (_mock *VM) GetConfig() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// VM_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type VM_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *VM_Expecter) GetConfig() *VM_GetConfig_Call {
	return &VM_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *VM_GetConfig_Call) Run(run func()) *VM_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VM_GetConfig_Call) Return(v any) *VM_GetConfig_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *VM_GetConfig_Call) RunAndReturn(run func() any) *VM_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcess provides a mock function for the type VM
func (_mock *VM) GetProcess() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProcess")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// VM_GetProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcess'
type VM_GetProcess_Call struct {
	*mock.Call
}

// GetProcess is a helper method to define mock.On call
func (_e *VM_Expecter) GetProcess() *VM_GetProcess_Call {
	return &VM_GetProcess_Call{Call: _e.mock.On("GetProcess")}
}

func (_c *VM_GetProcess_Call) Run(run func()) *VM_GetProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VM_GetProcess_Call) Return(n int) *VM_GetProcess_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *VM_GetProcess_Call) RunAndReturn(run func() int) *VM_GetProcess_Call {
	_c.Call.Return(run)
	return _c
}

// SetProcess provides a mock function for the type VM
func (_mock *VM) SetProcess(pid int) error {
	ret := _mock.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for SetProcess")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(pid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VM_SetProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProcess'
type VM_SetProcess_Call struct {
	*mock.Call
}

// SetProcess is a helper method to define mock.On call
//   - pid int
func (_e *VM_Expecter) SetProcess(pid interface{}) *VM_SetProcess_Call {
	return &VM_SetProcess_Call{Call: _e.mock.On("SetProcess", pid)}
}

func (_c *VM_SetProcess_Call) Run(run func(pid int)) *VM_SetProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *VM_SetProcess_Call) Return(err error) *VM_SetProcess_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VM_SetProcess_Call) RunAndReturn(run func(pid int) error) *VM_SetProcess_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type VM
func (_mock *VM) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VM_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type VM_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *VM_Expecter) Start() *VM_Start_Call {
	return &VM_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *VM_Start_Call) Run(run func()) *VM_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VM_Start_Call) Return(err error) *VM_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VM_Start_Call) RunAndReturn(run func() error) *VM_Start_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type VM
func (_mock *VM) State() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// VM_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type VM_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *VM_Expecter) State() *VM_State_Call {
	return &VM_State_Call{Call: _e.mock.On("State")}
}

func (_c *VM_State_Call) Run(run func()) *VM_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VM_State_Call) Return(s string) *VM_State_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *VM_State_Call) RunAndReturn(run func() string) *VM_State_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type VM
func (_mock *VM) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VM_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type VM_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *VM_Expecter) Stop() *VM_Stop_Call {
	return &VM_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *VM_Stop_Call) Run(run func()) *VM_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VM_Stop_Call) Return(err error) *VM_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VM_Stop_Call) RunAndReturn(run func() error) *VM_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Transition provides a mock function for the type VM
func (_mock *VM) Transition(newState manager.ManagerState) error {
	ret := _mock.Called(newState)

	if len(ret) == 0 {
		panic("no return value specified for Transition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(manager.ManagerState) error); ok {
		r0 = returnFunc(newState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VM_Transition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transition'
type VM_Transition_Call struct {
	*mock.Call
}

// Transition is a helper method to define mock.On call
//   - newState manager.ManagerState
func (_e *VM_Expecter) Transition(newState interface{}) *VM_Transition_Call {
	return &VM_Transition_Call{Call: _e.mock.On("Transition", newState)}
}

func (_c *VM_Transition_Call) Run(run func(newState manager.ManagerState)) *VM_Transition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 manager.ManagerState
		if args[0] != nil {
			arg0 = args[0].(manager.ManagerState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *VM_Transition_Call) Return(err error) *VM_Transition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VM_Transition_Call) RunAndReturn(run func(newState manager.ManagerState) error) *VM_Transition_Call {
	_c.Call.Return(run)
	return _c
}
