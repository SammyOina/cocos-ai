// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/ultravioletrs/cocos/manager"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewManagerServiceClient creates a new instance of ManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerServiceClient {
	mock := &ManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ManagerServiceClient is an autogenerated mock type for the ManagerServiceClient type
type ManagerServiceClient struct {
	mock.Mock
}

type ManagerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerServiceClient) EXPECT() *ManagerServiceClient_Expecter {
	return &ManagerServiceClient_Expecter{mock: &_m.Mock}
}

// AttestationPolicy provides a mock function for the type ManagerServiceClient
func (_mock *ManagerServiceClient) AttestationPolicy(ctx context.Context, in *manager.AttestationPolicyReq, opts ...grpc.CallOption) (*manager.AttestationPolicyRes, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttestationPolicy")
	}

	var r0 *manager.AttestationPolicyRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.AttestationPolicyReq, ...grpc.CallOption) (*manager.AttestationPolicyRes, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.AttestationPolicyReq, ...grpc.CallOption) *manager.AttestationPolicyRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manager.AttestationPolicyRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *manager.AttestationPolicyReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ManagerServiceClient_AttestationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttestationPolicy'
type ManagerServiceClient_AttestationPolicy_Call struct {
	*mock.Call
}

// AttestationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *manager.AttestationPolicyReq
//   - opts ...grpc.CallOption
func (_e *ManagerServiceClient_Expecter) AttestationPolicy(ctx interface{}, in interface{}, opts ...interface{}) *ManagerServiceClient_AttestationPolicy_Call {
	return &ManagerServiceClient_AttestationPolicy_Call{Call: _e.mock.On("AttestationPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ManagerServiceClient_AttestationPolicy_Call) Run(run func(ctx context.Context, in *manager.AttestationPolicyReq, opts ...grpc.CallOption)) *ManagerServiceClient_AttestationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *manager.AttestationPolicyReq
		if args[1] != nil {
			arg1 = args[1].(*manager.AttestationPolicyReq)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ManagerServiceClient_AttestationPolicy_Call) Return(attestationPolicyRes *manager.AttestationPolicyRes, err error) *ManagerServiceClient_AttestationPolicy_Call {
	_c.Call.Return(attestationPolicyRes, err)
	return _c
}

func (_c *ManagerServiceClient_AttestationPolicy_Call) RunAndReturn(run func(ctx context.Context, in *manager.AttestationPolicyReq, opts ...grpc.CallOption) (*manager.AttestationPolicyRes, error)) *ManagerServiceClient_AttestationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CVMInfo provides a mock function for the type ManagerServiceClient
func (_mock *ManagerServiceClient) CVMInfo(ctx context.Context, in *manager.CVMInfoReq, opts ...grpc.CallOption) (*manager.CVMInfoRes, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CVMInfo")
	}

	var r0 *manager.CVMInfoRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.CVMInfoReq, ...grpc.CallOption) (*manager.CVMInfoRes, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.CVMInfoReq, ...grpc.CallOption) *manager.CVMInfoRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manager.CVMInfoRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *manager.CVMInfoReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ManagerServiceClient_CVMInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CVMInfo'
type ManagerServiceClient_CVMInfo_Call struct {
	*mock.Call
}

// CVMInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *manager.CVMInfoReq
//   - opts ...grpc.CallOption
func (_e *ManagerServiceClient_Expecter) CVMInfo(ctx interface{}, in interface{}, opts ...interface{}) *ManagerServiceClient_CVMInfo_Call {
	return &ManagerServiceClient_CVMInfo_Call{Call: _e.mock.On("CVMInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ManagerServiceClient_CVMInfo_Call) Run(run func(ctx context.Context, in *manager.CVMInfoReq, opts ...grpc.CallOption)) *ManagerServiceClient_CVMInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *manager.CVMInfoReq
		if args[1] != nil {
			arg1 = args[1].(*manager.CVMInfoReq)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ManagerServiceClient_CVMInfo_Call) Return(cVMInfoRes *manager.CVMInfoRes, err error) *ManagerServiceClient_CVMInfo_Call {
	_c.Call.Return(cVMInfoRes, err)
	return _c
}

func (_c *ManagerServiceClient_CVMInfo_Call) RunAndReturn(run func(ctx context.Context, in *manager.CVMInfoReq, opts ...grpc.CallOption) (*manager.CVMInfoRes, error)) *ManagerServiceClient_CVMInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVm provides a mock function for the type ManagerServiceClient
func (_mock *ManagerServiceClient) CreateVm(ctx context.Context, in *manager.CreateReq, opts ...grpc.CallOption) (*manager.CreateRes, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVm")
	}

	var r0 *manager.CreateRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.CreateReq, ...grpc.CallOption) (*manager.CreateRes, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.CreateReq, ...grpc.CallOption) *manager.CreateRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manager.CreateRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *manager.CreateReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ManagerServiceClient_CreateVm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVm'
type ManagerServiceClient_CreateVm_Call struct {
	*mock.Call
}

// CreateVm is a helper method to define mock.On call
//   - ctx context.Context
//   - in *manager.CreateReq
//   - opts ...grpc.CallOption
func (_e *ManagerServiceClient_Expecter) CreateVm(ctx interface{}, in interface{}, opts ...interface{}) *ManagerServiceClient_CreateVm_Call {
	return &ManagerServiceClient_CreateVm_Call{Call: _e.mock.On("CreateVm",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ManagerServiceClient_CreateVm_Call) Run(run func(ctx context.Context, in *manager.CreateReq, opts ...grpc.CallOption)) *ManagerServiceClient_CreateVm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *manager.CreateReq
		if args[1] != nil {
			arg1 = args[1].(*manager.CreateReq)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ManagerServiceClient_CreateVm_Call) Return(createRes *manager.CreateRes, err error) *ManagerServiceClient_CreateVm_Call {
	_c.Call.Return(createRes, err)
	return _c
}

func (_c *ManagerServiceClient_CreateVm_Call) RunAndReturn(run func(ctx context.Context, in *manager.CreateReq, opts ...grpc.CallOption) (*manager.CreateRes, error)) *ManagerServiceClient_CreateVm_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVm provides a mock function for the type ManagerServiceClient
func (_mock *ManagerServiceClient) RemoveVm(ctx context.Context, in *manager.RemoveReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVm")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.RemoveReq, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *manager.RemoveReq, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *manager.RemoveReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ManagerServiceClient_RemoveVm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVm'
type ManagerServiceClient_RemoveVm_Call struct {
	*mock.Call
}

// RemoveVm is a helper method to define mock.On call
//   - ctx context.Context
//   - in *manager.RemoveReq
//   - opts ...grpc.CallOption
func (_e *ManagerServiceClient_Expecter) RemoveVm(ctx interface{}, in interface{}, opts ...interface{}) *ManagerServiceClient_RemoveVm_Call {
	return &ManagerServiceClient_RemoveVm_Call{Call: _e.mock.On("RemoveVm",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ManagerServiceClient_RemoveVm_Call) Run(run func(ctx context.Context, in *manager.RemoveReq, opts ...grpc.CallOption)) *ManagerServiceClient_RemoveVm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *manager.RemoveReq
		if args[1] != nil {
			arg1 = args[1].(*manager.RemoveReq)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ManagerServiceClient_RemoveVm_Call) Return(empty *emptypb.Empty, err error) *ManagerServiceClient_RemoveVm_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *ManagerServiceClient_RemoveVm_Call) RunAndReturn(run func(ctx context.Context, in *manager.RemoveReq, opts ...grpc.CallOption) (*emptypb.Empty, error)) *ManagerServiceClient_RemoveVm_Call {
	_c.Call.Return(run)
	return _c
}
