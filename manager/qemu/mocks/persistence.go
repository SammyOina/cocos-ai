// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	qemu "github.com/ultravioletrs/cocos/manager/qemu"
)

// Persistence is an autogenerated mock type for the Persistence type
type Persistence struct {
	mock.Mock
}

// DeleteVM provides a mock function with given fields: id
func (_m *Persistence) DeleteVM(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadVMs provides a mock function with given fields:
func (_m *Persistence) LoadVMs() ([]qemu.VMState, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadVMs")
	}

	var r0 []qemu.VMState
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]qemu.VMState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []qemu.VMState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]qemu.VMState)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveVM provides a mock function with given fields: state
func (_m *Persistence) SaveVM(state qemu.VMState) error {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for SaveVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(qemu.VMState) error); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersistence creates a new instance of Persistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersistence(t interface {
	mock.TestingT
	Cleanup(func())
}) *Persistence {
	mock := &Persistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
