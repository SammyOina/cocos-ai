// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MeasurementProvider is an autogenerated mock type for the MeasurementProvider type
type MeasurementProvider struct {
	mock.Mock
}

type MeasurementProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MeasurementProvider) EXPECT() *MeasurementProvider_Expecter {
	return &MeasurementProvider_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: binaryPath
func (_m *MeasurementProvider) Run(binaryPath string) ([]byte, error) {
	ret := _m.Called(binaryPath)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(binaryPath)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(binaryPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(binaryPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeasurementProvider_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MeasurementProvider_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - binaryPath string
func (_e *MeasurementProvider_Expecter) Run(binaryPath interface{}) *MeasurementProvider_Run_Call {
	return &MeasurementProvider_Run_Call{Call: _e.mock.On("Run", binaryPath)}
}

func (_c *MeasurementProvider_Run_Call) Run(run func(binaryPath string)) *MeasurementProvider_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MeasurementProvider_Run_Call) Return(_a0 []byte, _a1 error) *MeasurementProvider_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MeasurementProvider_Run_Call) RunAndReturn(run func(string) ([]byte, error)) *MeasurementProvider_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MeasurementProvider) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MeasurementProvider_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MeasurementProvider_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MeasurementProvider_Expecter) Stop() *MeasurementProvider_Stop_Call {
	return &MeasurementProvider_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MeasurementProvider_Stop_Call) Run(run func()) *MeasurementProvider_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MeasurementProvider_Stop_Call) Return(_a0 error) *MeasurementProvider_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MeasurementProvider_Stop_Call) RunAndReturn(run func() error) *MeasurementProvider_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMeasurementProvider creates a new instance of MeasurementProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeasurementProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MeasurementProvider {
	mock := &MeasurementProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
