// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

type Verifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Verifier) EXPECT() *Verifier_Expecter {
	return &Verifier_Expecter{mock: &_m.Mock}
}

// JSONToPolicy provides a mock function with given fields: path
func (_m *Verifier) JSONToPolicy(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for JSONToPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_JSONToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONToPolicy'
type Verifier_JSONToPolicy_Call struct {
	*mock.Call
}

// JSONToPolicy is a helper method to define mock.On call
//   - path string
func (_e *Verifier_Expecter) JSONToPolicy(path any) *Verifier_JSONToPolicy_Call {
	return &Verifier_JSONToPolicy_Call{Call: _e.mock.On("JSONToPolicy", path)}
}

func (_c *Verifier_JSONToPolicy_Call) Run(run func(path string)) *Verifier_JSONToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Verifier_JSONToPolicy_Call) Return(_a0 error) *Verifier_JSONToPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_JSONToPolicy_Call) RunAndReturn(run func(string) error) *Verifier_JSONToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// VerifTeeAttestation provides a mock function with given fields: report, teeNonce
func (_m *Verifier) VerifTeeAttestation(report []byte, teeNonce []byte) error {
	ret := _m.Called(report, teeNonce)

	if len(ret) == 0 {
		panic("no return value specified for VerifTeeAttestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(report, teeNonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifTeeAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifTeeAttestation'
type Verifier_VerifTeeAttestation_Call struct {
	*mock.Call
}

// VerifTeeAttestation is a helper method to define mock.On call
//   - report []byte
//   - teeNonce []byte
func (_e *Verifier_Expecter) VerifTeeAttestation(report any, teeNonce any) *Verifier_VerifTeeAttestation_Call {
	return &Verifier_VerifTeeAttestation_Call{Call: _e.mock.On("VerifTeeAttestation", report, teeNonce)}
}

func (_c *Verifier_VerifTeeAttestation_Call) Run(run func(report []byte, teeNonce []byte)) *Verifier_VerifTeeAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *Verifier_VerifTeeAttestation_Call) Return(_a0 error) *Verifier_VerifTeeAttestation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifTeeAttestation_Call) RunAndReturn(run func([]byte, []byte) error) *Verifier_VerifTeeAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// VerifVTpmAttestation provides a mock function with given fields: report, vTpmNonce
func (_m *Verifier) VerifVTpmAttestation(report []byte, vTpmNonce []byte) error {
	ret := _m.Called(report, vTpmNonce)

	if len(ret) == 0 {
		panic("no return value specified for VerifVTpmAttestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(report, vTpmNonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifVTpmAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifVTpmAttestation'
type Verifier_VerifVTpmAttestation_Call struct {
	*mock.Call
}

// VerifVTpmAttestation is a helper method to define mock.On call
//   - report []byte
//   - vTpmNonce []byte
func (_e *Verifier_Expecter) VerifVTpmAttestation(report any, vTpmNonce any) *Verifier_VerifVTpmAttestation_Call {
	return &Verifier_VerifVTpmAttestation_Call{Call: _e.mock.On("VerifVTpmAttestation", report, vTpmNonce)}
}

func (_c *Verifier_VerifVTpmAttestation_Call) Run(run func(report []byte, vTpmNonce []byte)) *Verifier_VerifVTpmAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *Verifier_VerifVTpmAttestation_Call) Return(_a0 error) *Verifier_VerifVTpmAttestation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifVTpmAttestation_Call) RunAndReturn(run func([]byte, []byte) error) *Verifier_VerifVTpmAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAttestation provides a mock function with given fields: report, teeNonce, vTpmNonce
func (_m *Verifier) VerifyAttestation(report []byte, teeNonce []byte, vTpmNonce []byte) error {
	ret := _m.Called(report, teeNonce, vTpmNonce)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAttestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) error); ok {
		r0 = rf(report, teeNonce, vTpmNonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifyAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAttestation'
type Verifier_VerifyAttestation_Call struct {
	*mock.Call
}

// VerifyAttestation is a helper method to define mock.On call
//   - report []byte
//   - teeNonce []byte
//   - vTpmNonce []byte
func (_e *Verifier_Expecter) VerifyAttestation(report any, teeNonce any, vTpmNonce any) *Verifier_VerifyAttestation_Call {
	return &Verifier_VerifyAttestation_Call{Call: _e.mock.On("VerifyAttestation", report, teeNonce, vTpmNonce)}
}

func (_c *Verifier_VerifyAttestation_Call) Run(run func(report []byte, teeNonce []byte, vTpmNonce []byte)) *Verifier_VerifyAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *Verifier_VerifyAttestation_Call) Return(_a0 error) *Verifier_VerifyAttestation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifyAttestation_Call) RunAndReturn(run func([]byte, []byte, []byte) error) *Verifier_VerifyAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
