// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// Attestation provides a mock function for the type Provider
func (_mock *Provider) Attestation(teeNonce []byte, vTpmNonce []byte) ([]byte, error) {
	ret := _mock.Called(teeNonce, vTpmNonce)

	if len(ret) == 0 {
		panic("no return value specified for Attestation")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return returnFunc(teeNonce, vTpmNonce)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = returnFunc(teeNonce, vTpmNonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = returnFunc(teeNonce, vTpmNonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_Attestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attestation'
type Provider_Attestation_Call struct {
	*mock.Call
}

// Attestation is a helper method to define mock.On call
//   - teeNonce []byte
//   - vTpmNonce []byte
func (_e *Provider_Expecter) Attestation(teeNonce interface{}, vTpmNonce interface{}) *Provider_Attestation_Call {
	return &Provider_Attestation_Call{Call: _e.mock.On("Attestation", teeNonce, vTpmNonce)}
}

func (_c *Provider_Attestation_Call) Run(run func(teeNonce []byte, vTpmNonce []byte)) *Provider_Attestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Provider_Attestation_Call) Return(bytes []byte, err error) *Provider_Attestation_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Provider_Attestation_Call) RunAndReturn(run func(teeNonce []byte, vTpmNonce []byte) ([]byte, error)) *Provider_Attestation_Call {
	_c.Call.Return(run)
	return _c
}

// AzureAttestationToken provides a mock function for the type Provider
func (_mock *Provider) AzureAttestationToken(tokenNonce []byte) ([]byte, error) {
	ret := _mock.Called(tokenNonce)

	if len(ret) == 0 {
		panic("no return value specified for AzureAttestationToken")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(tokenNonce)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(tokenNonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(tokenNonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_AzureAttestationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AzureAttestationToken'
type Provider_AzureAttestationToken_Call struct {
	*mock.Call
}

// AzureAttestationToken is a helper method to define mock.On call
//   - tokenNonce []byte
func (_e *Provider_Expecter) AzureAttestationToken(tokenNonce interface{}) *Provider_AzureAttestationToken_Call {
	return &Provider_AzureAttestationToken_Call{Call: _e.mock.On("AzureAttestationToken", tokenNonce)}
}

func (_c *Provider_AzureAttestationToken_Call) Run(run func(tokenNonce []byte)) *Provider_AzureAttestationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_AzureAttestationToken_Call) Return(bytes []byte, err error) *Provider_AzureAttestationToken_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Provider_AzureAttestationToken_Call) RunAndReturn(run func(tokenNonce []byte) ([]byte, error)) *Provider_AzureAttestationToken_Call {
	_c.Call.Return(run)
	return _c
}

// TeeAttestation provides a mock function for the type Provider
func (_mock *Provider) TeeAttestation(teeNonce []byte) ([]byte, error) {
	ret := _mock.Called(teeNonce)

	if len(ret) == 0 {
		panic("no return value specified for TeeAttestation")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(teeNonce)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(teeNonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(teeNonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_TeeAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeeAttestation'
type Provider_TeeAttestation_Call struct {
	*mock.Call
}

// TeeAttestation is a helper method to define mock.On call
//   - teeNonce []byte
func (_e *Provider_Expecter) TeeAttestation(teeNonce interface{}) *Provider_TeeAttestation_Call {
	return &Provider_TeeAttestation_Call{Call: _e.mock.On("TeeAttestation", teeNonce)}
}

func (_c *Provider_TeeAttestation_Call) Run(run func(teeNonce []byte)) *Provider_TeeAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_TeeAttestation_Call) Return(bytes []byte, err error) *Provider_TeeAttestation_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Provider_TeeAttestation_Call) RunAndReturn(run func(teeNonce []byte) ([]byte, error)) *Provider_TeeAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// VTpmAttestation provides a mock function for the type Provider
func (_mock *Provider) VTpmAttestation(vTpmNonce []byte) ([]byte, error) {
	ret := _mock.Called(vTpmNonce)

	if len(ret) == 0 {
		panic("no return value specified for VTpmAttestation")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(vTpmNonce)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(vTpmNonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(vTpmNonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_VTpmAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VTpmAttestation'
type Provider_VTpmAttestation_Call struct {
	*mock.Call
}

// VTpmAttestation is a helper method to define mock.On call
//   - vTpmNonce []byte
func (_e *Provider_Expecter) VTpmAttestation(vTpmNonce interface{}) *Provider_VTpmAttestation_Call {
	return &Provider_VTpmAttestation_Call{Call: _e.mock.On("VTpmAttestation", vTpmNonce)}
}

func (_c *Provider_VTpmAttestation_Call) Run(run func(vTpmNonce []byte)) *Provider_VTpmAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_VTpmAttestation_Call) Return(bytes []byte, err error) *Provider_VTpmAttestation_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Provider_VTpmAttestation_Call) RunAndReturn(run func(vTpmNonce []byte) ([]byte, error)) *Provider_VTpmAttestation_Call {
	_c.Call.Return(run)
	return _c
}
