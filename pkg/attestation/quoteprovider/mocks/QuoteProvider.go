// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	sevsnp "github.com/google/go-sev-guest/proto/sevsnp"
	mock "github.com/stretchr/testify/mock"
)

// LeveledQuoteProvider is an autogenerated mock type for the LeveledQuoteProvider type
type LeveledQuoteProvider struct {
	mock.Mock
}

type LeveledQuoteProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *LeveledQuoteProvider) EXPECT() *LeveledQuoteProvider_Expecter {
	return &LeveledQuoteProvider_Expecter{mock: &_m.Mock}
}

// GetRawQuoteAtLevel provides a mock function with given fields: reportData, vmpl
func (_m *LeveledQuoteProvider) GetRawQuoteAtLevel(reportData [64]byte, vmpl uint) ([]uint8, error) {
	ret := _m.Called(reportData, vmpl)

	if len(ret) == 0 {
		panic("no return value specified for GetRawQuoteAtLevel")
	}

	var r0 []uint8
	var r1 error
	if rf, ok := ret.Get(0).(func([64]byte, uint) ([]uint8, error)); ok {
		return rf(reportData, vmpl)
	}
	if rf, ok := ret.Get(0).(func([64]byte, uint) []uint8); ok {
		r0 = rf(reportData, vmpl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint8)
		}
	}

	if rf, ok := ret.Get(1).(func([64]byte, uint) error); ok {
		r1 = rf(reportData, vmpl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeveledQuoteProvider_GetRawQuoteAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawQuoteAtLevel'
type LeveledQuoteProvider_GetRawQuoteAtLevel_Call struct {
	*mock.Call
}

// GetRawQuoteAtLevel is a helper method to define mock.On call
//   - reportData [64]byte
//   - vmpl uint
func (_e *LeveledQuoteProvider_Expecter) GetRawQuoteAtLevel(reportData interface{}, vmpl interface{}) *LeveledQuoteProvider_GetRawQuoteAtLevel_Call {
	return &LeveledQuoteProvider_GetRawQuoteAtLevel_Call{Call: _e.mock.On("GetRawQuoteAtLevel", reportData, vmpl)}
}

func (_c *LeveledQuoteProvider_GetRawQuoteAtLevel_Call) Run(run func(reportData [64]byte, vmpl uint)) *LeveledQuoteProvider_GetRawQuoteAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([64]byte), args[1].(uint))
	})
	return _c
}

func (_c *LeveledQuoteProvider_GetRawQuoteAtLevel_Call) Return(_a0 []uint8, _a1 error) *LeveledQuoteProvider_GetRawQuoteAtLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LeveledQuoteProvider_GetRawQuoteAtLevel_Call) RunAndReturn(run func([64]byte, uint) ([]uint8, error)) *LeveledQuoteProvider_GetRawQuoteAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupported provides a mock function with no fields
func (_m *LeveledQuoteProvider) IsSupported() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LeveledQuoteProvider_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type LeveledQuoteProvider_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
func (_e *LeveledQuoteProvider_Expecter) IsSupported() *LeveledQuoteProvider_IsSupported_Call {
	return &LeveledQuoteProvider_IsSupported_Call{Call: _e.mock.On("IsSupported")}
}

func (_c *LeveledQuoteProvider_IsSupported_Call) Run(run func()) *LeveledQuoteProvider_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeveledQuoteProvider_IsSupported_Call) Return(_a0 bool) *LeveledQuoteProvider_IsSupported_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeveledQuoteProvider_IsSupported_Call) RunAndReturn(run func() bool) *LeveledQuoteProvider_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Product provides a mock function with no fields
func (_m *LeveledQuoteProvider) Product() *sevsnp.SevProduct {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Product")
	}

	var r0 *sevsnp.SevProduct
	if rf, ok := ret.Get(0).(func() *sevsnp.SevProduct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sevsnp.SevProduct)
		}
	}

	return r0
}

// LeveledQuoteProvider_Product_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Product'
type LeveledQuoteProvider_Product_Call struct {
	*mock.Call
}

// Product is a helper method to define mock.On call
func (_e *LeveledQuoteProvider_Expecter) Product() *LeveledQuoteProvider_Product_Call {
	return &LeveledQuoteProvider_Product_Call{Call: _e.mock.On("Product")}
}

func (_c *LeveledQuoteProvider_Product_Call) Run(run func()) *LeveledQuoteProvider_Product_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeveledQuoteProvider_Product_Call) Return(_a0 *sevsnp.SevProduct) *LeveledQuoteProvider_Product_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeveledQuoteProvider_Product_Call) RunAndReturn(run func() *sevsnp.SevProduct) *LeveledQuoteProvider_Product_Call {
	_c.Call.Return(run)
	return _c
}

// NewLeveledQuoteProvider creates a new instance of LeveledQuoteProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeveledQuoteProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeveledQuoteProvider {
	mock := &LeveledQuoteProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
