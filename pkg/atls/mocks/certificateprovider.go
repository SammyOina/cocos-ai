// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"crypto/tls"

	mock "github.com/stretchr/testify/mock"
)

// NewCertificateProvider creates a new instance of CertificateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateProvider {
	mock := &CertificateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CertificateProvider is an autogenerated mock type for the CertificateProvider type
type CertificateProvider struct {
	mock.Mock
}

type CertificateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateProvider) EXPECT() *CertificateProvider_Expecter {
	return &CertificateProvider_Expecter{mock: &_m.Mock}
}

// GetCertificate provides a mock function for the type CertificateProvider
func (_mock *CertificateProvider) GetCertificate(clientHello *tls.ClientHelloInfo) (*tls.Certificate, error) {
	ret := _mock.Called(clientHello)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *tls.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*tls.ClientHelloInfo) (*tls.Certificate, error)); ok {
		return returnFunc(clientHello)
	}
	if returnFunc, ok := ret.Get(0).(func(*tls.ClientHelloInfo) *tls.Certificate); ok {
		r0 = returnFunc(clientHello)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Certificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*tls.ClientHelloInfo) error); ok {
		r1 = returnFunc(clientHello)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CertificateProvider_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type CertificateProvider_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
//   - clientHello *tls.ClientHelloInfo
func (_e *CertificateProvider_Expecter) GetCertificate(clientHello interface{}) *CertificateProvider_GetCertificate_Call {
	return &CertificateProvider_GetCertificate_Call{Call: _e.mock.On("GetCertificate", clientHello)}
}

func (_c *CertificateProvider_GetCertificate_Call) Run(run func(clientHello *tls.ClientHelloInfo)) *CertificateProvider_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *tls.ClientHelloInfo
		if args[0] != nil {
			arg0 = args[0].(*tls.ClientHelloInfo)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CertificateProvider_GetCertificate_Call) Return(certificate *tls.Certificate, err error) *CertificateProvider_GetCertificate_Call {
	_c.Call.Return(certificate, err)
	return _c
}

func (_c *CertificateProvider_GetCertificate_Call) RunAndReturn(run func(clientHello *tls.ClientHelloInfo) (*tls.Certificate, error)) *CertificateProvider_GetCertificate_Call {
	_c.Call.Return(run)
	return _c
}
