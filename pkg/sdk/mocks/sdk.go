// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	context "context"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// SDK is an autogenerated mock type for the SDK type
type SDK struct {
	mock.Mock
}

// Algo provides a mock function with given fields: ctx, algorithm, requirements, privKey
func (_m *SDK) Algo(ctx context.Context, algorithm *os.File, requirements *os.File, privKey interface{}) error {
	ret := _m.Called(ctx, algorithm, requirements, privKey)

	if len(ret) == 0 {
		panic("no return value specified for Algo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *os.File, *os.File, interface{}) error); ok {
		r0 = rf(ctx, algorithm, requirements, privKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Attestation provides a mock function with given fields: ctx, reportData, attestationFile
func (_m *SDK) Attestation(ctx context.Context, reportData [64]byte, attestationFile *os.File) error {
	ret := _m.Called(ctx, reportData, attestationFile)

	if len(ret) == 0 {
		panic("no return value specified for Attestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [64]byte, *os.File) error); ok {
		r0 = rf(ctx, reportData, attestationFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields: ctx, dataset, filename, privKey
func (_m *SDK) Data(ctx context.Context, dataset *os.File, filename string, privKey interface{}) error {
	ret := _m.Called(ctx, dataset, filename, privKey)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *os.File, string, interface{}) error); ok {
		r0 = rf(ctx, dataset, filename, privKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Result provides a mock function with given fields: ctx, privKey, resultFile
func (_m *SDK) Result(ctx context.Context, privKey interface{}, resultFile *os.File) error {
	ret := _m.Called(ctx, privKey, resultFile)

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *os.File) error); ok {
		r0 = rf(ctx, privKey, resultFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSDK creates a new instance of SDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDK {
	mock := &SDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
