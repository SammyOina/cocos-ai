// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: agent/cvms/cvms.proto

package cvms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CVMsService_Process_FullMethodName = "/cvms.CVMsService/Process"
)

// CVMsServiceClient is the client API for CVMsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVMsServiceClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage], error)
}

type cVMsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCVMsServiceClient(cc grpc.ClientConnInterface) CVMsServiceClient {
	return &cVMsServiceClient{cc}
}

func (c *cVMsServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CVMsService_ServiceDesc.Streams[0], CVMsService_Process_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientStreamMessage, ServerStreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CVMsService_ProcessClient = grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage]

// CVMsServiceServer is the server API for CVMsService service.
// All implementations must embed UnimplementedCVMsServiceServer
// for forward compatibility.
type CVMsServiceServer interface {
	Process(grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]) error
	mustEmbedUnimplementedCVMsServiceServer()
}

// UnimplementedCVMsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCVMsServiceServer struct{}

func (UnimplementedCVMsServiceServer) Process(grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedCVMsServiceServer) mustEmbedUnimplementedCVMsServiceServer() {}
func (UnimplementedCVMsServiceServer) testEmbeddedByValue()                     {}

// UnsafeCVMsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVMsServiceServer will
// result in compilation errors.
type UnsafeCVMsServiceServer interface {
	mustEmbedUnimplementedCVMsServiceServer()
}

func RegisterCVMsServiceServer(s grpc.ServiceRegistrar, srv CVMsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCVMsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CVMsService_ServiceDesc, srv)
}

func _CVMsService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CVMsServiceServer).Process(&grpc.GenericServerStream[ClientStreamMessage, ServerStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CVMsService_ProcessServer = grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]

// CVMsService_ServiceDesc is the grpc.ServiceDesc for CVMsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVMsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cvms.CVMsService",
	HandlerType: (*CVMsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _CVMsService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent/cvms/cvms.proto",
}
